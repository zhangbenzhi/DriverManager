package com.example.drivermanager.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.drivermanager.bean.ServiceDataBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SERVICE_DATA_BEAN".
*/
public class ServiceDataBeanDao extends AbstractDao<ServiceDataBean, Long> {

    public static final String TABLENAME = "SERVICE_DATA_BEAN";

    /**
     * Properties of entity ServiceDataBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Mileage = new Property(1, String.class, "mileage", false, "MILEAGE");
        public final static Property Money = new Property(2, String.class, "money", false, "MONEY");
        public final static Property Times = new Property(3, String.class, "times", false, "TIMES");
        public final static Property DriverId = new Property(4, Long.class, "driverId", false, "DRIVER_ID");
    }


    public ServiceDataBeanDao(DaoConfig config) {
        super(config);
    }
    
    public ServiceDataBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SERVICE_DATA_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"MILEAGE\" TEXT," + // 1: mileage
                "\"MONEY\" TEXT," + // 2: money
                "\"TIMES\" TEXT," + // 3: times
                "\"DRIVER_ID\" INTEGER);"); // 4: driverId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SERVICE_DATA_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ServiceDataBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String mileage = entity.getMileage();
        if (mileage != null) {
            stmt.bindString(2, mileage);
        }
 
        String money = entity.getMoney();
        if (money != null) {
            stmt.bindString(3, money);
        }
 
        String times = entity.getTimes();
        if (times != null) {
            stmt.bindString(4, times);
        }
 
        Long driverId = entity.getDriverId();
        if (driverId != null) {
            stmt.bindLong(5, driverId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ServiceDataBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String mileage = entity.getMileage();
        if (mileage != null) {
            stmt.bindString(2, mileage);
        }
 
        String money = entity.getMoney();
        if (money != null) {
            stmt.bindString(3, money);
        }
 
        String times = entity.getTimes();
        if (times != null) {
            stmt.bindString(4, times);
        }
 
        Long driverId = entity.getDriverId();
        if (driverId != null) {
            stmt.bindLong(5, driverId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ServiceDataBean readEntity(Cursor cursor, int offset) {
        ServiceDataBean entity = new ServiceDataBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // mileage
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // money
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // times
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4) // driverId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ServiceDataBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMileage(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMoney(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTimes(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDriverId(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ServiceDataBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ServiceDataBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ServiceDataBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
